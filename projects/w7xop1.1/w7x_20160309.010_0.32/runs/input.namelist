
&general
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  ! General program options:
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!ss scanType = 21
!   1: Convergence scan
!   2: Scan of E_r
!ss runSpecFile = w7x_20160309.010_0.32.runspec

  RHSMode = 1
  ! 1: Solve for a single right-hand side.
  ! 2: Solve for 3 right-hand sides to get the 3x3 transport matrix. Presently implemented only for 1 species.
  ! 3: Solve for the 2x2 monoenergetic transport coefficients. When this option is chosen, Nx is set to 1 and only 1 species is used.


/

&geometryParameters

  inputRadialCoordinate = 3
  inputRadialCoordinateForGradients = 1

  rN_wish = 0.5

  geometryScheme = 11

  VMECRadialOption = 0
  ! 0: Use the exact *_wish flux surface
  ! 1: Use nearest flux surf from VMEC's HALF grid, interpolation unnecessary.
  ! 2: Use nearest flux surface from VMEC's FULL grid.  

  equilibriumFile = "~/sfincs/sfincs/equilibria/w7x-lim-op1_1.bc"
  min_Bmn_to_load = 0

/

&speciesParameters
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  ! Species parameters
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


  Zs =  -1 1
  mHats = 5.4462d-4  1.0
  nHats = 
  THats = 
  dNHatdpsiNs = 
  dTHatdpsiNs = 

/

&physicsParameters
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  ! Physics parameters:
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  Delta = 4.5694d-3  ! reference values: \bar{T}=1 keV, \bar{n}=10^20 m^-3,
                     ! \bar{Phi}=1 kV, \bar{B}=1 T, \bar{R}=1 m, proton mass

  alpha = 1d+0

  ! Inductive electric field (often 0).
  EParallelHat = 0

  ! Radial electric field
  dPhiHatdpsiN   = 0.0d+0

!   Number of values of the radial electric field to include in a parameter scan:
!ss NErs = 5
!
!
!ss dPhiHatdpsiNMin = -1.0d+0
!ss dPhiHatdpsiNMax =  1.0d+0
!

  nu_n = 0.00831565d+0

  collisionOperator = 0
  ! 0 = Full linearized Fokker-Planck operator
  ! 1 = pitch-angle scattering with no momentum-conserving term


  ! To use one of the 4 most common trajectory models, the remaining parameters
  ! in this namelist should be set as follows:
  !
  ! Full trajectories:
  !   includeXDotTerm = .true.
  !   includeElectricFieldTermInXiDot = .true.
  !   useDKESExBDrift = .false.
  !   include_fDivVE_term = .false.
  !
  ! DKES trajectories:
  !   includeXDotTerm =	.false.
  !   includeElectricFieldTermInXiDot = .false.
  !   useDKESExBDrift = .true.
  !   include_fDivVE_term = .false.

  includeXDotTerm = .true.
!  includeXDotTerm = .false.

  includeElectricFieldTermInXiDot = .true.
!  includeElectricFieldTermInXiDot = .false.

!  useDKESExBDrift = .true.
  useDKESExBDrift = .false.


/

&resolutionParameters
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  ! Numerical resolution parameters:
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  

  Ntheta = 35 
!ss NthetaMinFactor = 0.85
!ss NthetaMaxFactor = 1.15
!ss NthetaNumRuns = 2

  Nzeta = 100 
!ss NzetaMinFactor = 0.7143
!ss NzetaMaxFactor = 1.2857
!ss NzetaNumRuns = 2

  Nxi = 100 
!ss NxiMinFactor = 0.85
!ss NxiMaxFactor = 1.15
!ss NxiNumRuns = 2
  
  NL = 4 
!ss NLMinFactor = 1
!ss NLMaxFactor = 2
!ss NLNumRuns = 0
  
  Nx = 7 
!ss NxMinFactor = 0.888
!ss NxMaxFactor = 1.111
!ss NxNumRuns = 2

  NxPotentialsPerVth = 40.0 
!ss NxPotentialsPerVthMinFactor = 0.5
!ss NxPotentialsPerVthMaxFactor = 2
!ss NxPotentialsPerVthNumRuns = 0
  
  xMax = 5.0 
!ss xMaxMinFactor = 1
!ss xMaxMaxFactor = 2
!ss xMaxNumRuns = 0

  solverTolerance = 2e-05 
!ss solverToleranceMinFactor = 0.5
!ss solverToleranceMaxFactor = 2.5
!ss solverToleranceNumRuns = 2

/

&otherNumericalParameters
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  ! Other numerical parameters:
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 
  thetaDerivativeScheme = 2
  zetaDerivativeScheme = 2
  ! Options for thetaDerivativeScheme and zetaDerivativeScheme:
  ! 0 = Spectral collocation
  ! 1 = 2nd order finite differences (3-point stencil)
  ! 2 = 4th order finite differences (5-point stencil)
  ! You should set these parameters to 2 except in rare circumstances.

  ExBDerivativeScheme = 0
  magneticDriftDerivativeScheme = 0

  whichParallelSolverToFactorPreconditioner = 1
  ! Options for whichParallelSolverToFactorPreconditioner:
  ! 1 = use mumps if it is detected, otherwise use superlu_dist
  ! 2 = force use of superlu_dist, if it is available
  !
  ! The value of whichParallelSolverToFactorPreconditioner is only used when morpheus is run with 
  ! more MPI processors than runs desired (1 if a single run, or more if a convergence scan.)
  ! Otherwise, matrices are not distributed across processors, so the PETSc built-in serial sparse
  ! direct solver is used to factor the preconditioner.

  PETSCPreallocationStrategy = 1
  ! This setting changes the estimated number of nonzeros (nnz) used for allocating memory for the matrix and preconditioner.
  ! 0 = Old method with high estimated nnz. This method works consistently but uses WAY more memory than necessary.
  ! 1 = New method with lower, more precise estimated nnz.  This method has been less thoroughly tested, but it should use much less memory.
/

&preconditionerOptions
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  ! Settings for how to simplify the linear system
  ! to obtain the preconditioner:
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  preconditioner_species = 1
  ! 0 = keep full species coupling
  ! 1 = drop all cross-species coupling

  preconditioner_x = 1
  ! 0 = keep full x coupling
  ! 1 = drop everything off-diagonal in x
  ! 2 = keep only upper-triangular part in x
  ! 3 = keep only the tridiagonal terms in x
  ! 4 = keep only the diagonal and superdiagonal in x

  preconditioner_x_min_L = 0
  ! The x structure of the matrix will only be simplified for L >= this value.
  ! Set preconditioner_x_min_L=0 to simplify the matrix for every L.

  preconditioner_theta = 0
  ! 0 = keep full theta coupling
  ! 1 = use a 3-point finite difference stencil for d/dtheta
  ! 2 = drop all theta coupling
  ! 3 = replace d/dtheta with the identity matrix

  preconditioner_theta_min_L = 2
  ! The theta structure of the matrix will only be simplified for L >= this value.
  ! Set preconditioner_theta_min_L=0 to simplify the matrix for every L.

  preconditioner_zeta = 0
  ! 0 = keep full zeta coupling
  ! 1 = use a 3-point finite difference stencil for d/dzeta
  ! 2 = drop all zeta coupling
  ! 3 = replace d/dzeta with the identity matrix

  preconditioner_zeta_min_L = 2
  ! The zeta structure of the matrix will only be simplified for L >= this value.
  ! Set preconditioner_zeta_min_L=0 to simplify the matrix for every L.

  preconditioner_xi = 0
  ! 0 = keep full xi coupling
  ! 1 = drop terms that are +/- 2 from the diagonal in xi, 
  !     so preconditioner is tridiagonal in xi

  reusePreconditioner = .true.
  !reusePreconditioner = .false.
  ! This setting matters only for nonlinear calculations.
  ! If true, the nonlinear term will not be included in the preconditioner matrix, meaning the preconditioner matrix is the same
  ! at every iteration, and so the preconditioner matrix only needs to be LU-factored once.  If false, the preconditioner matrix
  ! for the Jacobian will be different at each iteration of the Newton solve, so the preconditioner needs to be LU-factored at
  ! each iteration.  The nonlinear term also introduces a lot of nonzeros into the preconditioner matrix, so setting
  ! reusePreconditioner=true not only dramatically reduces the time required for a nonlinear calculation, but also the memory required.
/

&export_f
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  ! Export ditribution function
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  export_full_f = .false.
  export_delta_f = .false.

/
