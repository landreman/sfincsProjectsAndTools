#!/usr/bin/env python
# -*- coding: utf-8 -*-
## THIS TOOL PLOTS SEVERAL FLUXES (Y-AXIS) IN A SFINCS_SCAN=21 AS FUNCTION OF COLLISIONALITY (X-AXIS).
## IF THE X-AXIS QUANTITY IS A VECTOR, SPECIFY WHICH INDEX TO USE WITH UNDERSCORE, I.E. XAXISQUANTITY_N.
## SEE INPUT SECTION BELOW


outputFilename = "sfincsOutput.h5"

import matplotlib
#import matplotlib.pyplot as plt
import h5py
import numpy
import numpy as np
import inspect, math, os
import pickle
import sys
from subprocess import call

print "This is "+ inspect.getfile(inspect.currentframe())

makePDF = False
for arg in sys.argv:
   if arg.lower()=='pdf':
      makePDF = True

if makePDF:
   matplotlib.use('PDF')


import matplotlib.pyplot as plt

#matplotlib.rcParams['text.usetex'] = True
#matplotlib.rcParams['text.latex.unicode'] = True

numRuns = 0
scanVariableValues = []
outputs = []

##INPUTS##
e = 1.6021766208*10**(-19) #Electron charge
mbar = 1.672621777*10**(-27) #Proton mass
nbar = 10.0**20 # in 10^20
Tbar = 1000*e 
Rbar = 1.0
Bbar = 1.0
vbar = np.sqrt(2.0 * Tbar / mbar)


xVariableName = "nHats_1"

##TEMPORARY COMMENT##
yVariableNames = ["particleFlux_vm_rHat", "heatFlux_vm_rHat", "FSABjHat"] ##For vectors plot all in same plot 

##TEMPORARY COMMENT##
yVariableFactors = [nbar*vbar / 10.0**20, 10.0**17*nbar*mbar*vbar**3 / 10.0**20, 10.0**14*e*nbar*vbar*Bbar / 10.0**20]

##SOME TESTS##
#aHat = 0.51092
#psiN = 0.25
#psiAHat = -0.348668

##TEST1##
#yVariableNames = ["particleFlux_vm_psiHat", "particleFlux_vm_rHat", "FSABjHat"]
#yVariableFactors = [nbar*vbar*Rbar*Bbar / 10.0**20, nbar*vbar*Rbar*Bbar*2.0*psiAHat*np.sqrt(psiN)/aHat / 10.0**20, 10.0**14*e*nbar*vbar*Bbar / 10.0**20]

##TEST2##
#yVariableNames = ["heatFlux_vm_psiHat", "heatFlux_vm_rHat", "FSABjHat"]
#yVariableFactors = [10.0**17*Rbar*Bbar*nbar*mbar*vbar**3 / 10.0**20, 10.0**17*Rbar*Bbar*nbar*mbar*vbar**3*2.0*psiAHat*np.sqrt(psiN)/aHat / 10.0**20, 10.0**14*e*nbar*vbar*Bbar / 10.0**20]

##############

xAxisLabel = r'$\nu_{i}^{\prime}$'
yAxisLabels = [r'$<\mathbf{\Gamma}_s \cdot \nabla r>$ $[10^{20} \mathrm{m}^{-2} \mathrm{s}^{-1}]$', r'$<\mathbf{Q}_s \cdot \nabla r>$ $[\mathrm{kW} \mathrm{m}^{-2}]$', r'$<\mathbf{j} \cdot \mathbf{B}>$ $[\mathrm{T} \mathrm{MA}  \mathrm{m}^{-2}]$']

logXaxis = True
logYaxis = [True, True, True]

FigSize = (30,15)

font = {'size':15}
matplotlib.rc('font', **font)
matplotlib.rc('lines',markeredgewidth=0,markersize=3,linewidth=2.5)
matplotlib.rc('axes',linewidth=1.5)
#matplotlib.rc('text', usetex=True)

PlotLinespecs = ['rD-', 'bo-', 'gx-', 'ys-', 'cx--', 'm+--']
PlotLineColors = ['r', 'b', 'g', 'y', 'c', 'm']
PlotMarkerEdgeWidth = [0, 0, 3, 0, 3, 3]
PlotLegendLabels = [r'SFINCS Fokker-Planck, H ions', r'SFINCS Fokker-Planck, electrons', r'DKES pitch-angle scattering, H ions', r'DKES pitch-angle scattering, electrons', r'SFINCS Fokker-Planck',r'DKES pitch-angle scattering']

PlotMarkerSize = 8

#InfoText = 'INFO: Collisionality has been varied by varying the densities' + r' ($n_i = n_e$)' + '.\nThe density gradients have been varied accordingly to keep the\ndensity gradient scale length fixed.\n'+ r'$r/a = 0.50$, $E_r = -5.93 \mathrm{kV/m}.$' +'\n\n' + r'$\nu_{i}^{\prime} = \frac{(G + \iota I) \nu_{ii}}{v_i B_0}$' + '\n' + r'$\nu_{ii} = \frac{4 \sqrt{2 \pi} n_i e^4 \ln \Lambda}{3 m_i^{1/2} T_i^{3/2}}$' + '\n' + 'See Moll' + u'é' + 'n et al. PoP ' + r'$\mathbf{22}$' + r' $112508$' + r' $(2015)$' + ' for definitions.' 

##Er=-5.93##
#InfoText = 'INFO: Collisionality has been varied by varying the densities' + r' ($n_i = n_e$)' + '.\nThe density gradients have been varied accordingly to keep the\ndensity gradient scale length fixed.\n'+ 'Base case: '+ r'$r/a = 0.50$, $a = 0.51092 \mathrm{m}$, $E_r = -5.93 \mathrm{kV/m}$,' + '\n' + r'$n_e = n_i = 0.93 \cdot 10^{20} \mathrm{m}^{-3}$,' + r'$T_e = 4.13\mathrm{keV}$, $T_i = 3.77\mathrm{keV}$,' + '\n' + r'$\frac{dn}{d(r/a)} = -0.33$, $\frac{dT_e}{d(r/a)} = -4.31\mathrm{keV}$, $\frac{dT_i}{d(r/a)} = -2.12\mathrm{keV}$.' +'\n\n' + r'$\nu_{i}^{\prime} = \frac{(G + \iota I) \nu_{ii}}{v_i B_0}$' + '\n' + r'$\nu_{ii} = \frac{4 \sqrt{2 \pi} n_i e^4 \ln \Lambda}{3 m_i^{1/2} T_i^{3/2}}$' + '\n' + 'See Moll' + u'é' + 'n et al. PoP ' + r'$\mathbf{22}$' + r' $112508$' + r' $(2015)$' + ' for definitions.' 

##Er=0##
InfoText = 'INFO: Collisionality has been varied by varying the densities' + r' ($n_i = n_e$)' + '.\nThe density gradients have been varied accordingly to keep the\ndensity gradient scale length fixed.\n'+ 'Base case: '+ r'$r/a = 0.50$, $a = 0.51092 \mathrm{m}$, $E_r = 0.0 \mathrm{kV/m}$,' + '\n' + r'$n_e = n_i = 0.93 \cdot 10^{20} \mathrm{m}^{-3}$,' + r'$T_e = 4.13\mathrm{keV}$, $T_i = 3.77\mathrm{keV}$,' + '\n' + r'$\frac{dn}{d(r/a)} = -0.33$, $\frac{dT_e}{d(r/a)} = -4.31\mathrm{keV}$, $\frac{dT_i}{d(r/a)} = -2.12\mathrm{keV}$.' +'\n\n' + r'$\nu_{i}^{\prime} = \frac{(G + \iota I) \nu_{ii}}{v_i B_0}$' + '\n' + r'$\nu_{ii} = \frac{4 \sqrt{2 \pi} n_i e^4 \ln \Lambda}{3 m_i^{1/2} T_i^{3/2}}$' + '\n' + 'See Moll' + u'é' + 'n et al. PoP ' + r'$\mathbf{22}$' + r' $112508$' + r' $(2015)$' + ' for definitions.'
InfoTextPosX = 0.54
InfoTextPosY = 0.40

#inputfiles = ['DKES_baseline_ra0p5_Er-5.93kVm-1_Fluxes_vs_density.pydat']
inputfiles = ['DKES_baseline_ra0p5_Er0.0kVm-1_Fluxes_vs_density.pydat']

##To plot vertical line for baseline case
baselineDensity = 0.92589314

##END INPUTS##

MinFloat = pow(10, -sys.float_info.dig)

xArrayPosition = -1
yArrayPosition = -1

#def print_options() :
#   # Get a list of the subdirectories:                                                                                                                                        
#   directories = filter(os.path.isdir, os.listdir("."))
#   atLeastOneOutputExists = False
#   
#   for directory in directories:
#      filename = directory+"/"+outputFilename
#      if not os.path.isfile(filename):
#         continue
#      
#      try:
#         f = h5py.File(filename,'r')
#      except IOError:
#         continue
#      
#      try:
#         # Try reading a field that should definitely be present in the output file for any run that completed.                                                              \
#         dummy = f["FSABFlow"][()]
#      except:
#         continue
#      
#      try:
#         finished = f["finished"]
#      except KeyError:
#         continue
#      #if reaching this far the run is ok                                                                                                                                     
#      call(["h5dump", "-n", filename])
#      atLeastOneOutputExists = True
#      break
#   
#   
#   if not atLeastOneOutputExists:
#      print "Error! Cannot read any sfincs output file in subdirectories of this directory."
#      exit(1)




#while True:
#    xVariableName = raw_input("Which variable on x-axis? [to quit write quit; to get a list of datasets (quantities to plot) in the output .h5 files write options] ")
#    if xVariableName.lower() == "quit":
#        exit(0)
#    elif xVariableName.lower() == "options":
#       print_options()
#    else :
#        break


if len(str(xVariableName).split("_")) != 1 :
   try:
      xArrayPosition = int(str(xVariableName).split("_")[-1])
      xVariableName = '_'.join(str(xVariableName).split("_")[:-1])
      if xArrayPosition < 1 :
         print "WARNING: Index has to be larger than 0, using 1 instead."
         xArrayPosition = 1
   except ValueError:
      xArrayPosition = -1

    
#while True:
#    yVariableName = raw_input("Which variable on y-axis? [to quit write quit; to get a list of datasets (quantities to plot) in the output .h5 files write options] ")
#    if yVariableName.lower() == "quit":
#        exit(0)
#    elif yVariableName.lower() == "options":
#       print_options()
#    else :
#        break

#if len(str(yVariableName).split("_")) != 1 :
#   try:
#      yArrayPosition = int(str(yVariableName).split("_")[-1])
#      yVariableName = '_'.join(str(yVariableName).split("_")[:-1])
#      if yArrayPosition < 1:
#         print "WARNING: Index has to be larger than 0, using 1 instead."
#         yArrayPosition = 1
#   except ValueError:
#      yArrayPosition = -1

xArrayPositionString = ""
yArrayPositionString = ""


if xArrayPosition != -1 :
   xArrayPositionString = "[" + str(xArrayPosition) + "]"
#if yArrayPosition != -1 :
#   yArrayPositionString = "[" + str(yArrayPosition) + "]"

#print "Plot " + yVariableName + yArrayPositionString + " as a function of " + xVariableName + xArrayPositionString + "." 


def uniq(seq):
   checked = []
   for e in seq:
       if e not in checked:
           checked.append(e)
   return checked

# Get a list of the subdirectories:                                                                        
directories = filter(os.path.isdir, os.listdir("."))

atLeastOneDirectorySucceeded = False

for directory in directories:
    filename = directory+"/"+outputFilename
    if not os.path.isfile(filename):
        print "Directory "+directory+" does not have a "+outputFilename+" file (yet)."
        continue

    try:
        f = h5py.File(filename,'r')
    except IOError:
        print "Unable to open "+filename+" even though this file exists."
        continue

    try:
       # Try reading the x variable
       if xArrayPosition != -1:
          xVariable = (f[xVariableName][()])[xArrayPosition - 1]
       else :
          xVariable = f[xVariableName][()]
    except:
       print "Unable to read value of " + xVariableName + xArrayPositionString + " in " + filename + "."
       continue
    print "Read " + xVariableName + xArrayPositionString + " = " + str(xVariable) + " from " + filename + "."  
    #try:
    # Try reading the y variables 
    yVariables = []
    try:
       iter = -1
       for yVariableName in yVariableNames :
          iter += 1
          try:
             yVariable = f[yVariableName][()]
             #yVariables.append(yVariable)
             print "Read " + yVariableName + " = " + str(yVariable) + " from " + filename + "."
             yVariable = yVariableFactors[iter] * yVariable
             yVariables.append(yVariable)
          except:
             print "Unable to read value of " + yVariableName + " in " + filename + "."
             raise
    except: 
       print "Unable to read value of all quantities in " + str(yVariableNames) + " in " + filename + "."
       continue
    try:
        # Try reading a field that should definitely be present in the output file for any run that completed.
        dummy = f["FSABFlow"][()]
    except:
        print "Unable to read "+filename+" even though this file exists."
        continue

    try:
        finished = f["finished"]
    except KeyError:
        print "Run in directory "+directory+" does not appear to have finished."
        continue

    print "Processing directory "+directory

    # The expression [()] converts from an h5py dataset to a numpy ndarray:
    integerToRepresentTrue = (f["integerToRepresentTrue"][()])
    inputRadialCoordinateForGradients_new = f["inputRadialCoordinateForGradients"][()]
    RHSMode_new = f["RHSMode"][()]
    Nspecies_new = f["Nspecies"][()]

    Zs_new = f["Zs"][()]
    THats_new = f["THats"][()] 
    B0OverBBar_new = f["B0OverBBar"][()]
    GHat_new = f["GHat"][()]
    IHat_new = f["IHat"][()]
    iota_new = f["iota"][()]
    nu_n_new = f["nu_n"][()]
    
    includePhi1_new = (f["includePhi1"][()] == integerToRepresentTrue)
    if numRuns == 0:
       inputRadialCoordinateForGradients = inputRadialCoordinateForGradients_new
       RHSMode = RHSMode_new
       Nspecies = Nspecies_new
       includePhi1 = includePhi1_new

       Zs = Zs_new
       THats = THats_new
       B0OverBBar = B0OverBBar_new
       GHat = GHat_new
       IHat = IHat_new
       iota = iota_new
       nu_n = nu_n_new
    else:
       if inputRadialCoordinateForGradients != inputRadialCoordinateForGradients_new:
          print "Error! inputRadialCoordinateForGradients is not consistent among runs."
          exit(1)
       if RHSMode != RHSMode_new:
          print "Error! RHSMode is not consistent among runs."
          exit(1)
       if Nspecies != Nspecies_new:
          print "Error! Nspecies is not consistent among runs."
          exit(1)
       if includePhi1 != includePhi1_new:
          print "Error! includePhi1 is not consistent among runs."
          exit(1)

       if not np.array_equal(Zs, Zs_new) :
          print "Error! Zs is not consistent among runs."
          exit(1)

       if not np.array_equal(THats, THats_new) :
          print "Error! THats is not consistent among runs."
          exit(1)

       if B0OverBBar != B0OverBBar_new:
            print "Error! B0OverBBar is not consistent among runs."
            exit(1)

       if GHat != GHat_new:
            print "Error! GHat is not consistent among runs."
            exit(1)

       if IHat != IHat_new:
            print "Error! IHat is not consistent among runs."
            exit(1)

       if iota != iota_new:
            print "Error! iota is not consistent among runs."
            exit(1)

       if nu_n != nu_n_new:
            print "Error! nu_n is not consistent among runs."
            exit(1)


    if RHSMode != 1 and RHSMode != 2 and RHSMode != 3:
        print "Error! sfincsScanPlot is not yet set up for RHSMode = "+str(RHSMode)
        exit(1)

    ##TMP
    print str(xVariable)
    print str(yVariables)


    scanVariableValues.append(xVariable)
    outputs.append(yVariables)
    
    atLeastOneDirectorySucceeded = True

    numRuns += 1

    print "Successfully read run in directory "+directory

if not atLeastOneDirectorySucceeded:
   print "Error! There do not seem to be any completed sfincs jobs in subdirectories of this directory or none of the output files contain both " + xVariableName + xArrayPositionString +  " and " + yVariableName + yArrayPositionString + "."
   exit(1)



##TMP
print str(scanVariableValues)
print str(outputs)
#print len(outputs)
#print outputs[0]
#print outputs[1]
#print outputs[0][1]
#print outputs[0][1][1]
#print outputs[0][1][1][0]
#print outputs[0][:][1]
#print outputs[0][2][0]
#exit(0)

# Sort:
scanVariableValues_sorted = sorted(scanVariableValues)
outputs_sorted = []
for scanVariableValue in scanVariableValues_sorted:
   outputs_sorted.append(outputs[scanVariableValues.index(scanVariableValue)])
 
outputs_array = numpy.array(outputs_sorted)


##CONVERT FROM DENSITY TO NORMALIZED COLLISIONALITY
#print (GHat + iota*IHat)*nu_n / (B0OverBBar*THats[xArrayPosition - 1]**2)
#print GHat
#print IHat
#print iota
#print B0OverBBar
#print nu_n
#print THats[xArrayPosition - 1]
DensityToNuFactor = np.absolute((GHat + iota*IHat)*nu_n / (B0OverBBar*THats[xArrayPosition - 1]**2))

#scanVariableValues_sorted = np.absolute((GHat + iota*IHat)*nu_n / (B0OverBBar*THats[xArrayPosition - 1]**2)) * numpy.array(scanVariableValues_sorted)
scanVariableValues_sorted = DensityToNuFactor * numpy.array(scanVariableValues_sorted)

print str(scanVariableValues_sorted)
print outputs_array

#xAxisLabels=[]
#yAxisLabels=[]

numQuantities = len(yVariableNames)
#xAxisLabels.append(xVariableName + xArrayPositionString) 
#yAxisLabels.append(yVariableName + yArrayPositionString)


#logXaxis = False
#logYaxis = False

#inputXscale = raw_input("Scale on x-axis? [linear (default) / log] ")
#if inputXscale.lower() == "log":
#    logXaxis = True

#inputYscale = raw_input("Scale on y-axis? [linear (default) / log] ")
#if inputYscale.lower() == "log":
#    logYaxis = True


baselineNu = DensityToNuFactor * baselineDensity

# ***************************************************
# Now make the plot
# ***************************************************

fig = plt.figure(figsize=FigSize)
fig.patch.set_facecolor('white')

numCols = math.ceil(math.sqrt(numQuantities*1.0))
numRows = math.ceil(numQuantities*1.0/numCols)

xdata = []
ydata = []
#xdata = np.empty()
#ydata = np.empty()
xlabels = []
ylabels = []
xscales = []
yscales = []
ymins = []
ymaxs = []
#linespec = '.-'

for iQuantity in range(numQuantities):
   ax = plt.subplot(numRows,numCols,iQuantity+1)
   xdata.append(scanVariableValues_sorted)
   ydata.append(outputs_array[:,iQuantity])


   if logYaxis[iQuantity] :
      yscales.append('symlog')
   else:
      yscales.append('linear')
   

   if logXaxis : 
      xscales.append('log')
   else:
      xscales.append('linear') 

   xlabels.append(xAxisLabel)
   ylabels.append(yAxisLabels[iQuantity])

   print "Plot"
   print xdata[-1]
   print ydata[-1]
   print ""
   #print ydata[-1].tolist()
   #exit(0) 
   ydataToPlot = np.array(ydata[-1])
#   print ydataToPlot.flatten()
#   for pos in np.nditer(ydataToPlot, flags=['refs_ok'], op_flags=['readwrite']):
#      print pos
##      pos[...] =  np.ndarray.flatten(pos)
#      pos[...] = pos.flatten().flatten()
#      pos = pos.tolist()
#      print pos
#   print ""   
   ydataToPlot = ydataToPlot.tolist()
#   print ydataToPlot
   ydataToPlot = [s.tolist() for s in ydataToPlot]
#   print ""
#   print ydataToPlot
   ydataToPlot = np.array(ydataToPlot)
#   print ""
#   print ydataToPlot.shape
#   print ydataToPlot.shape[1]
   numToPlot = ydataToPlot.shape[1]
#   print ""
#   print ydataToPlot
#   print ""
#   print ydataToPlot[:,0].flatten().tolist()
#   print ""
#   print ydataToPlot[:,1].flatten().tolist()
#   for s in ydataToPlot:
#      print s

#   print np.ndarray.flatten(ydata[-1])
#   print np.ndarray.flatten(ydata[-1][0])
#   print ydata[-1].shape
#   print ydata[-1][0]
#   print ydata[-1][0][1]
#   print ydata[-1][:][1]
#   print np.transpose(ydata[-1])
#   print ydata[-1][:,1]

   plotAbsMin = float("inf")
   plotAbsMax = 0.0

   for iPlot in range(numToPlot):
      print xdata[-1]
      print ydataToPlot[:,iPlot].flatten().tolist()

      plotAbsMin = min(plotAbsMin, np.amin(np.absolute(ydataToPlot[:,iPlot].flatten())))
      plotAbsMax = max(plotAbsMax, np.amax(np.absolute(ydataToPlot[:,iPlot].flatten())))
   
      #plt.plot(xdata[-1],ydata[-1],linespec)
      if numToPlot > 1:
         plt.plot(xdata[-1],ydataToPlot[:,iPlot].flatten().tolist(),PlotLinespecs[iPlot], color=PlotLineColors[iPlot], markersize=PlotMarkerSize, markeredgewidth=PlotMarkerEdgeWidth[iPlot], markeredgecolor=None, label=PlotLegendLabels[iPlot])
      else :
         plt.plot(xdata[-1],ydataToPlot[:,iPlot].flatten().tolist(),PlotLinespecs[4], color=PlotLineColors[4], markersize=PlotMarkerSize, markeredgewidth=PlotMarkerEdgeWidth[4], markeredgecolor=None, label=PlotLegendLabels[4])


   ##DATA FROM OTHER CODES THAN SFINCS##
   for infile in inputfiles:
      try:
         inputParams = np.genfromtxt(infile, comments="#")
      except Exception as exc:
         print (exc.__class__.__name__, ": ", exc.message, "while reading %s" % infile)
         sys.exit(0)
      else:
         ##print inputParams
         nu_norm = DensityToNuFactor/nbar * inputParams[:,0] #Normalized collisionality
         Gamma_e = 10**(-20) * inputParams[:,2] #Electron flux in 10^20 m^-2 s^-1
         Gamma_i = 10**(-20) * inputParams[:,3] #Ion flux in 10^20 m^-2 s^-1

         Q_e = inputParams[:,4] #Electron heat flux in kW m^-2
         Q_i = inputParams[:,5] #Ion heat flux in kW m^-2

         je_bsOverB0 = inputParams[:,6] #<J_e . B>/B0 in MA/m^2
         ji_bsOverB0 = inputParams[:,7] #<J_i . B>/B0 in MA/m^2 
         j_bs = - (je_bsOverB0 + ji_bsOverB0)*B0OverBBar*Bbar

         if iQuantity == 0:
            plt.plot(nu_norm.tolist(), Gamma_i.tolist(),PlotLinespecs[2], color=PlotLineColors[2], markersize=PlotMarkerSize, markeredgewidth=PlotMarkerEdgeWidth[2], markeredgecolor=None, label=PlotLegendLabels[2])
            plt.plot(nu_norm.tolist(), Gamma_e.tolist(),PlotLinespecs[3], color=PlotLineColors[3], markersize=PlotMarkerSize, markeredgewidth=PlotMarkerEdgeWidth[3], markeredgecolor=None, label=PlotLegendLabels[3])
         elif iQuantity == 1:
            plt.plot(nu_norm.tolist(), Q_i.tolist(),PlotLinespecs[2], color=PlotLineColors[2], markersize=PlotMarkerSize, markeredgewidth=PlotMarkerEdgeWidth[2], markeredgecolor=None, label=PlotLegendLabels[2])
            plt.plot(nu_norm.tolist(), Q_e.tolist(),PlotLinespecs[3], color=PlotLineColors[3], markersize=PlotMarkerSize, markeredgewidth=PlotMarkerEdgeWidth[3], markeredgecolor=None, label=PlotLegendLabels[3])
         elif iQuantity == 2:
            plt.plot(nu_norm.tolist(), j_bs.tolist(),PlotLinespecs[5], color=PlotLineColors[5], markersize=PlotMarkerSize, markeredgewidth=PlotMarkerEdgeWidth[5], markeredgecolor=None, label=PlotLegendLabels[5])

   #####################################      


   plt.xscale(xscales[-1])
   plt.yscale(yscales[-1])
   plt.xlabel(xlabels[-1])
   plt.ylabel(ylabels[-1])
   plt.grid(which='both')

   ymin,ymax = plt.ylim()
   ymins.append(ymin)
   ymaxs.append(ymax)

   ##Add vertical line for baseline
   plt.vlines(baselineNu, ymin, ymax, colors='k', linestyles='dashed', label='Base case')

   ## bbox_to_anchor dimensions: x_coord, y_coord, ?, ? 
   if iQuantity == 1:
      plt.legend(bbox_to_anchor=(0.01, 0.60, 1., .102), loc=3, ncol=1, mode=None, borderaxespad=0., fontsize=16)
   elif iQuantity == 2:
      plt.legend(bbox_to_anchor=(0.02, 0.88, 0.10, .10), loc=2, ncol=1, mode=None, borderaxespad=0., fontsize=16)

   multipleSigns = False
   if np.sign(ymin) != np.sign(ymax):
      multipleSigns = True

   if logYaxis[iQuantity] :
      #plt.yticks([-1e-4, -1e-5, -1e-6, -1e-7])
      if multipleSigns:
         space_lin = 1
         linlog_limit = np.power(10, np.floor(np.log10(plotAbsMin)))
      else :
         space_lin = MinFloat
         linlog_limit = MinFloat
      linlog_limit_array = np.empty(ydataToPlot.shape[0]); linlog_limit_array.fill(linlog_limit)

      plt.yscale('symlog', linthreshy = linlog_limit, linscaley = space_lin)
      if multipleSigns:
         plt.fill_between(xdata[-1], linlog_limit_array, -linlog_limit_array, facecolor='green', alpha=0.12, hatch='/')
         plt.text(0.85, 0.5, r'Linear y-axis region', color='#005544', horizontalalignment='center',verticalalignment='center', transform=ax.transAxes)

#plt.legend(bbox_to_anchor=(-0.66, 1.04, 1., .102), loc=2, ncol=2, mode=None, borderaxespad=0., fontsize=24)

outputFile = open('sfincsScan.dat','wb')
scanType=21
data = {'scanType':scanType, 'numQuantities':numQuantities, 'numRows':numRows,'numCols':numCols,
        'xdata':xdata, 'ydata':ydata, 'xlabels':xlabels, 'ylabels':ylabels,
        'xscales':xscales, 'yscales':yscales, 'ymins':ymins, 'ymaxs':ymaxs}
# pickle.dump(scanType,outputFile)
# pickle.dump(numQuantities,outputFile)
# pickle.dump(numRows,outputFile)
# pickle.dump(numCols,outputFile)
# pickle.dump(xdata,outputFile)
# pickle.dump(ydata,outputFile)
# pickle.dump(xlabels,outputFile)
# pickle.dump(ylabels,outputFile)
# pickle.dump(xscales,outputFile)
# pickle.dump(yscales,outputFile)
# pickle.dump(ymins,outputFile)
# pickle.dump(ymaxs,outputFile)
pickle.dump(data,outputFile)
outputFile.close()

titleString = "Plot generated by "+ inspect.getfile(inspect.currentframe()) + "\nRun in "+os.getcwd()
ax = fig.add_axes([0,0,1,1], frameon=False)
ax.text(0.5,0.99,titleString,horizontalalignment='center',verticalalignment='top')

ax.text(InfoTextPosX, InfoTextPosY, InfoText, color='#000000', horizontalalignment='left',verticalalignment='top', multialignment='left')

# If this script was called with any command-line arguments, then do not actually display the plot:
if len(sys.argv) == 1:
    plt.show()

if makePDF:
   if len(sys.argv)>2 : #Use the substituted name as file name
      print "Writing plot to " + os.getcwd() + "/" + sys.argv[2] + ".pdf."
      plt.savefig(sys.argv[2] + ".pdf")
   else: #Use script name as file name
      print "Writing plot to " + os.getcwd() + "/" + os.path.basename(__file__) + ".pdf."
      plt.savefig(os.path.basename(__file__) + ".pdf")

