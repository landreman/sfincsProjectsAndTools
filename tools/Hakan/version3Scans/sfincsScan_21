#!/usr/bin/env python

# This script will not work if called directly.
# From the command line, you should call sfincsScan instead.

import os, inspect

print "This is "+ inspect.getfile(inspect.currentframe())
print "Beginning a runspec.dat scan."

runspecFilename = "runspec.dat"

def readRunspec(therunspecFilename)
    if not os.path.isfile(therunspecFilename):
        print "Error! The file "+therunspecFilename+" must be present in the directory from which you call sfincsScan."
        exit(1)
    # Load the runspec file:
    with open(therunspecFilename, 'r') as rsf:
        runspecLines = rsf.readlines()
    
    lind=0
    while runspecLines[lind][0]=="!":
        lind+=1
    runparamnames=runspecLines[lind-1].split
    noElems=len(runparamnames)
    datalines=runspecLines[lind:]
    runparams=[[0 for j in range(noElems)] for i in range(len(datalines))]
    for datalineind in range(len(datalines))
        for parind in range(noElems)
           thestring=datalines[datalineind].split[parind]
           thestring= thestring.replace('d','e').replace('D','e')
           if ("." in thestring) or ("e" in thestring)
               runparams[datalineind][parind]=float(thestring)
           else
               runparams[datalineind][parind]=int(thestring)
    
    rsf.close()
    return runparamnames, runparams

runparamnames, runparams=readRunspec(runspecFilename)

# Read in the job.sfincsScan file:
with open(jobFilename, 'r') as f:
    jobFile = f.readlines()


numRunsInScan=len(runparams)
for runNum in range(numRunsInScan):
   dirNum = runNum-1
less   while True:
      dirNum+=1
      dirName=str(dirNum)
      if dirNum<10:
         dirName = "0" + dirName
      if not os.path.exists(dirName):
          break
   os.mkdir(dirName)
   os.chdir(dirName)

   jobName="Sfx."+dirName
   print "Beginning to handle job "+str(runNum+1)+" of "+str(numRunsInScan)+": "+dirName

    # Copy the job.sfincsScan file:
    thisJobFile = list(jobFile)
    # This next function is defined separately for each system in sfincsScan
    nameJobFile(thisJobFile,directory)
    if sfincsSystem=="hydra"
        for parind in range(len(runparamnames))
            if runparamnames[parind]=="Nnodes"
                for line in thisJobFile
                    if "# @ node =" in line
                        thisJobFile[thisJobFile.index(line)]="# @ node = "+str(runparams[runNum][parind])
            if runparamnames[parind]=="Nppernode"
                for line in thisJobFile
                    if "# @ tasks_per_node =" in line
                        thisJobFile[thisJobFile.index(line)]="# @ tasks_per_node = "+str(runparams[runNum][parind])
            if runparamnames[parind]=="ConsCpus"
                for line in thisJobFile
                    if "# @ resources = ConsumableCpus" in line
                        thisJobFile[thisJobFile.index(line)]="# @ resources = ConsumableCpus("+str(runparams[runNum][parind])+")"

    f = open(jobFilename,"w")
    f.writelines(thisJobFile)
    f.close()

    # Now copy the input.namelist file:
    f = open(filename,"w")
    for line in inputFile:
        for parind in range(len(runparamnames))
            if namelistLineContains(line,runparamnames[parind]):
                line = "  "+runparamnames[parind]+" = "+str(runparams[runNum][parind])+" ! Set by sfincsScan.\n"
        f.write(line)
    f.close()

    # Submit the sfincs job:
    try:
        # We need to include .split(" ") to separate the command-line arguments into an array of strings.   
        # I'm not sure why python requires this. 
        submissionResult = subprocess.call(submitCommand.split(" "))
    except:
        print "ERROR! Unable to submit run "+directory+" for some reason."
        raise
    else:
        if submissionResult==0:
            print "No errors submitting job "+directory
        else:
            print "Nonzero exit code returned when trying to submit job "+directory

    os.chdir("..")
