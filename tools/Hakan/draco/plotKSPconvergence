#!/usr/bin/env python



import os, inspect, math, subprocess, sys, argparse
import numpy as np
from sys import argv
import matplotlib.pyplot as plt

def parse_args(argv):

    parser = argparse.ArgumentParser(description='Launch a DKES calculation')
    parser.add_argument('Sfincsoutfile', type=str)
    return parser.parse_known_args(argv[1:])

#arg, arg_remains = parse_args(sys.argv)
#Sfincsoutfile=arg.Sfincsoutfile
Sfincsoutfile='Sfincs.out'
namelistfile='input.namelist'

try:
  f=open(Sfincsoutfile,'r')
except:
  sys.exit('Could not read '+Sfincsoutfile)


print('reading...')
eof=False
residual=[]
solvertime=[]

while not(eof):
  tmp_str=f.readline()
  while not('ELAPSED TIME IN SOLVE DRIVER' in tmp_str):
  #while not('KSP Residual norm' in tmp_str):
    tmp_str=f.readline()
    if not tmp_str:
      eof=True
      break
  if not(eof):
    solvertime.append(float(tmp_str[tmp_str.find('=')+1:]))

    resnorm_str=f.readline()
    try:
      residual.append(float(resnorm_str[resnorm_str.find('norm')+4:]))
    except:
      print(len(residual))
      print('Could not read norm from string:')
      print(resnorm_str)
      print('Index:')
      print(str(resnorm_str.find('norm')+4))

#print('closing '+Sfincsoutfile)
f.close()

if len(residual)==0:
  sys.exit('No iterations recorded yet.')
if len(residual)==1:
  sys.exit('Only one iteration recorded so far.')

solverTolerance=None
try:
  f=open(namelistfile,'r')
except:
  sys.exit('Could not read '+namelistfile)

#eof=False
while True:#not(eof):
  tmp_str=f.readline()
  if not tmp_str:
    #eof=True
    break
  if tmp_str.find('solverTolerance =')!=-1 or tmp_str.find('solverTolerance=')!=-1:
    rest_str=tmp_str[tmp_str.find('=')+1:]
    if rest_str.find('!')!=-1:
      solverTolerance=float(rest_str[:rest_str.find('!')]) 
    else:
      solverTolerance=float(rest_str)

#print('closing '+namelistfile)
f.close()

print('plotting...')

res=np.array(residual)
Dtime_minutes=np.array(solvertime)/60.0
time_minutes=np.cumsum(Dtime_minutes)
itervec=np.arange(len(res))

#estimate total time
if res[-1]/res[0]>solverTolerance:
  lnres=np.log(res/res[0])-np.log(solverTolerance)
  if len(lnres)==2:
    dlnres_diter=lnres[-1]-lnres[-2]
  elif len(lnres)==3 or lnres[-3]-2.0*lnres[-2]+lnres[-1]<0:
    weight=2.0/3.0 #Think a bit optimistic
    dlnres_diter=(lnres[-2]-lnres[-3])*(1.0-weight)+(lnres[-1]-lnres[-2])*weight
    #print '2'
  else:
    dlnres_diter=(lnres[-1]-lnres[-4])/3.0
    #print '3' 
  iter_togo=abs(lnres[-1]/dlnres_diter)
  time_togo=np.mean(Dtime_minutes)*iter_togo
  timeprognose=time_minutes[-1]+np.array([0.0,time_togo])
  relresprognose=np.array([res[-1]/res[0],solverTolerance])
  if time_togo>1.0:
    time_togo_str=str(int(np.round(time_togo)))+' minutes'
  else:
    time_togo_str=str(int(np.round(time_togo*6.0))*10)+' seconds'

#fig, (ax0,ax1) = plt.subplots(2,1,sharex=True,figsize=(6,7))
fig, (ax0,ax1,ax2) = plt.subplots(3,1,sharex=False,figsize=(6,10))


ax0.semilogy(time_minutes,res/res[0],'bo-')
if res[-1]/res[0]>solverTolerance:
  ax0.set_title('Time left (forecast): '+time_togo_str)
  if not(solverTolerance is None):
    ax0.semilogy(np.array([time_minutes[0],timeprognose[-1]]),
                 solverTolerance*np.ones(2),'r--')
    ax0.semilogy(timeprognose,relresprognose,'g--')
    ax0.legend(('residual','tolerance','prognosis'))
  else:
    ax0.semilogy(timeprognose,relresprognose,'g--')
    ax0.legend(('residual','prognosis'))
elif not(solverTolerance is None):
  ax0.semilogy(time_minutes,solverTolerance*np.ones_like(time_minutes),'r--')
  ax0.legend(('residual','tolerance'))

  
ax0.set_ylabel('relative')
ax0.set_xlabel('time [min]')

ax1.semilogy(res/res[0],'bo-')
if not(solverTolerance is None):
  ax1.semilogy(itervec,solverTolerance*np.ones_like(itervec),'r--')
  ax1.legend(('residual','tolerance'))
ax1.set_ylabel('relative')
ax1.set_xlabel('iterations')

ax2.semilogy(res,'bo-')
ax2.set_ylabel('absolute')
ax2.set_xlabel('iterations')


plt.show()
